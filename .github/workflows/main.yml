name: Seraphim CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  install:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Point to a named LTS release: https://nodejs.org/en/about/previous-releases
          node-version: 'lts/Jod'

      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-cacheNodeModulesLinux-${{ hashFiles('**/yarn.lock') }}

      # This gets proxied using the Seraphim root package.json, to the Microsoft package.json
      - name: Install dependencies
        if: steps.cacheNodeModules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

  test:
    runs-on: ubuntu-latest
    needs: [install]
    timeout-minutes: 10

    strategy:
      matrix:
        directory: [
          "electron",
          "common",
          "frontend",
          "vscode",
          "chrome"
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/Jod'

      - name: Restore node modules
        id: cacheNodeModules
        uses: actions/cache/restore@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-cacheNodeModulesLinux-${{ hashFiles('**/yarn.lock') }}

      - name: Ensure clean
        id: clean
        run: yarn clean

      # We allow the following to fail, so we can run all of the checks without having to fix one at a time
      - name: Lint
        id: lint
        continue-on-error: true
        run: yarn eslint --ext ts,tsx --max-warnings 0 ${{ matrix.directory }}

      - name: Typescript check
        id: typecheck
        continue-on-error: true
        working-directory: ${{ matrix.directory }}
        run: yarn tsc --noEmit

      - name: Unit test
        continue-on-error: true
        id: unit-test
        run: yarn vitest run ${{ matrix.directory }}
        env:
          TEST_RUNNING_DIR: ${{ matrix.directory }}

      - name: Build
        id: build
        continue-on-error: true
        working-directory: ${{ matrix.directory }}
        run: yarn build

      - name: Upload unit test results
        if: steps.unit-test.outcome == 'success'
        uses: dorny/test-reporter@v2
        with:
          name: unit-test-results
          path: ./.test/${{ matrix.directory }}-results.xml
          reporter: jest-junit

      - name: Check if any of the previous steps failed
        shell: bash
        run: |
          has_failed=false

          if [[ "${{ steps.lint.outcome }}" != "success" ]]; then
            echo -e "\033[0;31m✖ lint: failed\033[0m"
            has_failed=true
          else
            echo -e "\033[0;32m✔ lint: success\033[0m"
          fi

          if [[ "${{ steps.unit-test.outcome }}" != "success" ]]; then
            echo -e "\033[0;31m✖ test: failed\033[0m"
            has_failed=true
          else
            echo -e "\033[0;32m✔ test: success\033[0m"
          fi

          if [[ "${{ steps.typecheck.outcome }}" != "success" ]]; then
            echo -e "\033[0;31m✖ typescript: failed\033[0m"
            has_failed=true
          else
            echo -e "\033[0;32m✔ typescript: success\033[0m"
          fi

          if [[ "${{ steps.build.outcome }}" != "success" ]]; then
            echo -e "\033[0;31m✖ build: failed\033[0m"
            has_failed=true
          else
            echo -e "\033[0;32m✔ build: success\033[0m"
          fi

          if [[ "$has_failed" == "true" ]]; then
            echo "One or more steps failed, exiting with code 1"
            exit 1
          fi

  package:
    runs-on: ubuntu-latest
    needs: [
      install,
      test
    ]
    timeout-minutes: 20

    strategy:
      matrix:
        output: [
          "deb",
          "rpm"
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/Jod'

      - name: Restore node modules
        id: cacheNodeModules
        uses: actions/cache/restore@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-cacheNodeModulesLinux-${{ hashFiles('**/yarn.lock') }}

      - name: Ensure a clean working directory
        id: clean
        run: yarn clean

      # Setup Ubuntu
      # https://www.electronjs.org/docs/latest/development/build-instructions-linux
      - name: Apt installs
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang libdbus-1-dev libgtk-3-dev \
            libnotify-dev libasound2-dev libcap-dev \
            libcups2-dev libxtst-dev libxss1 libnss3-dev \
            gcc-multilib g++-multilib curl gperf bison \
            python3-dbusmock openjdk-8-jre fakeroot rpm \
            libx11-dev libxkbfile-dev libsecret-1-dev

      # Get the version of the package
      # This will output the package.json version to a env variable
      # I took this from the source code of:
      # https://github.com/marketplace/actions/get-current-package-version
      # Why do it this way instead of linking the action? Security, so we know what it does and it's not malicious
      # We shouldn't run our source code through third party apps if possible
      # https://github.com/martinbeentjes/npm-get-version-action/blob/main/entrypoint.sh
      - name: Get root package.json version
        id: package-version
        run: |
          echo "Reading package.json from package.json"
          PACKAGE_VERSION=$(cat package.json | jq '.version' | tr -d '"')
          echo "Package version is $PACKAGE_VERSION"
          echo "package-version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT

        # The frontend will show the version of the application in the UI
        # We should support "one source of truth" for the version, supporting the root package.json version
      - name: Put root package.json version into frontend/package.json version
        id: set-frontend-version
        run: |
          echo "Setting frontend/package.json version to ${{ steps.package-version.outputs.package-version }}"
          jq --arg version "${{ steps.package-version.outputs.package-version }}" '.version = $version' frontend/package.json > frontend/package.json.tmp
          mv frontend/package.json.tmp frontend/package.json

        # Electron uses the package.json version from the electron/package.json while compiling...
        # We should support "one source of truth" for the version, supporting the root package.json version
      - name: Put root package.json version into electron/package.json version
        id: set-electron-version
        run: |
          echo "Setting electron/package.json version to ${{ steps.package-version.outputs.package-version }}"
          jq --arg version "${{ steps.package-version.outputs.package-version }}" '.version = $version' electron/package.json > electron/package.json.tmp
          mv electron/package.json.tmp electron/package.json

      # Package for Linux
      - name: Compile Electron for ${{ matrix.output }}
        id: compile
        run: yarn compile:${{ matrix.output }}

      - name: Save compiled executable as cache
        uses: actions/cache/save@v4
        with:
          path: electron/out/electron-linux-x64
          key: linux-${{ matrix.output }}-${{ hashFiles('**/yarn.lock') }}

      # Upload the linux artifact
      - name: Upload linux artifact
        uses: actions/upload-artifact@v4
        # Only run this on the main branch
        if: github.ref == 'refs/heads/main'
        with:
          path: electron/out/make/${{ matrix.output }}/x64/*.${{ matrix.output }}
          name: linux-${{ matrix.output }}-${{ steps.package-version.outputs.package-version}}

  # smoketest:
  #   runs-on: ubuntu-latest
  #   needs: [
  #     package
  #   ]
  #   timeout-minutes: 20

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 'lts/Jod'

  #     - name: Restore node modules
  #       id: cacheNodeModules
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: "**/node_modules"
  #         key: ${{ runner.os }}-cacheNodeModulesLinux-${{ hashFiles('**/yarn.lock') }}

  #     - name: Restore compiled executable
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: electron/out/electron-linux-x64
  #         key: linux-deb-${{ hashFiles('**/yarn.lock') }}

  #     - name: Prepare Smoketest
  #       run: |
  #         sudo chown root electron/out/electron-linux-x64/chrome-sandbox
  #         sudo chmod 4755 electron/out/electron-linux-x64/chrome-sandbox
  #         sudo apt install -y xvfb xauth libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6

  #     - name: Run Smoketest
  #       run: xvfb-run --auto-servernum --server-args='-screen 0 1280x720x24' yarn smoketest
